#!/bin/sh

# WiFi connect for dmenu by Nicklas Rudolfsson
# https://github.com/nirucon

# Dependencies:
# Arch Linux:
#   sudo pacman -S networkmanager dmenu ttf-font-awesome mpv libnotify
# Void Linux:
#   sudo xbps-install -S NetworkManager dmenu font-awesome5 mpv libnotify
# Debian-based:
#   sudo apt install network-manager dmenu fonts-font-awesome mpv libnotify-bin

IFS=$'\n'

# Check if FontAwesome is installed
if fc-list | grep -qi "FontAwesome"; then
    ICON_DEVICE_NOT_FOUND=""  # FontAwesome icon for 'unlink'
    ICON_SCANNING=""          # FontAwesome icon for 'search'
    ICON_AP_NOT_FOUND=""      # FontAwesome icon for 'exclamation-triangle'
    ICON_CONNECTING=""       # FontAwesome icon for 'wifi'
    ICON_CONNECTION_FAILED="" # FontAwesome icon for 'exclamation-circle'
    ICON_CONNECTED=""        # FontAwesome icon for 'check-circle'
else
    ICON_DEVICE_NOT_FOUND="Device not found"
    ICON_SCANNING="Scanning"
    ICON_AP_NOT_FOUND="Access point not found"
    ICON_CONNECTING="Connecting"
    ICON_CONNECTION_FAILED="Connection failed"
    ICON_CONNECTED="Connected"
fi

get_connection() {
    nmcli -g UUID,connection.interface-name,802-11-wireless.ssid c | while IFS=: read -r uuid iface ssid; do
        [ "$iface" = "$1" ] && [ "$ssid" = "$2" ] && echo "$uuid" && return
    done
}

# Animation function for scanning
animate_scanning() {
    local i=0
    local delay=0.2
    local frames=("${ICON_SCANNING} Scanning." "${ICON_SCANNING} Scanning.." "${ICON_SCANNING} Scanning...")
    while true; do
        echo "${frames[i]}"
        i=$(( (i + 1) % 3 ))
        sleep $delay
    done
}

# Check if required tools are installed
for cmd in nmcli dmenu; do
    if ! command -v $cmd >/dev/null 2>&1; then
        echo "$cmd is required but not installed. Exiting."
        exit 1
    fi
done

# Get available WiFi devices
devices=$(nmcli -t -f DEVICE,TYPE d | grep ':wifi' | cut -d: -f1)

if [ -z "$devices" ]; then
    notify-send -u critical "$ICON_DEVICE_NOT_FOUND" "No Wi-Fi device found"
    exit 1
fi

device=$(printf "%s\n" "$devices" | dmenu -p "Choose your Wi-Fi card to start scanning:")
[ -z "$device" ] && exit

# Start the animation in the background and scan for Wi-Fi networks
animate_scanning | dmenu -p "Scanning..." &
animation_pid=$!
access_points=$(nmcli -t -f SSID d wifi list --rescan yes ifname "$device")
kill $animation_pid
wait $animation_pid 2>/dev/null

if [ -z "$access_points" ]; then
    notify-send -u critical "$ICON_AP_NOT_FOUND" "No access points found"
    exit 1
fi

access_point=$(printf "%s\n" "$access_points" | dmenu -p "Choose Wi-Fi ESSID:")
[ -z "$access_point" ] && exit

connection=$(get_connection "$device" "$access_point")

notify-send -u normal "$ICON_CONNECTING" "Connecting to $access_point"
if [ "$connection" ]; then
    if nmcli c up uuid "$connection" 2>&1 | grep -q "Error"; then
        notify-send -u critical "$ICON_CONNECTION_FAILED" "Connection failed"
    else
        notify-send -u normal "$ICON_CONNECTED" "Connected to $access_point"
    fi
    exit
fi

password=$(dmenu -p "Enter Password for $access_point:")
if [ "$password" ]; then
    ret=$(nmcli d wifi connect "$access_point" password "$password" ifname "$device" 2>&1)
else
    ret=$(nmcli d wifi connect "$access_point" ifname "$device" 2>&1)
fi

if echo "$ret" | grep -q "Error"; then
    notify-send -u critical "$ICON_CONNECTION_FAILED" "Connection failed"
    connection=$(get_connection "$device" "$access_point") && nmcli c delete "$connection"
else
    notify-send -u normal "$ICON_CONNECTED" "Connected to $access_point"
fi
